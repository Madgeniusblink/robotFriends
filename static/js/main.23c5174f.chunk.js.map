{"version":3,"sources":["styles/logo.svg","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundry.js","components/Header.js","containers/App.js","actions.js","constants.js","serviceWorker.js","reducers.js","index.js"],"names":["module","exports","__webpack_require__","p","Card","_ref","name","email","id","set","react_default","a","createElement","className","alt","src","concat","CardList","robots","cardArray","map","user","i","components_Card","key","SearchBox","searchChange","aria-label","type","placeholder","onChange","Scroll","props","children","ErrorBoundry","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","hasError","error","info","setState","Component","Header","nextProps","nextState","App","onRequestRobots","_this$props","searchField","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","logo","components_Header","components_SearchBox","src_components_Scroll","components_ErrorBoundry","components_CardList","connect","searchRobots","requestRobots","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","intialStateSearch","intialStateRobots","logger","createLogger","rootReducer","combineReducers","arguments","length","undefined","action","objectSpread","store","createStore","applyMiddleware","thunkMiddleWare","ReactDOM","render","es","src_containers_App","document","getElementById","URL","process","href","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.23c5174f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\n\n\nconst Card = ({name, email, id, set}) => {\n    return (\n        <div className=\"tc bg-purple dib br3 pa3 ma2 grow bw2 shadow-5\">\n            <img alt='robots' src={`https://robohash.org/${id}?size=200x200`} ></img>\n            <div>\n                <h2>{name}</h2>\n                <p>{email}</p>\n            </div>\n        </div>\n    )\n}\n\nexport default Card;\n","import React from 'react'\nimport Card from './Card'\n\n\nconst CardList = ({ robots }) => {\n    const cardArray = robots.map((user, i) => {\n        return <Card key={i} id={robots[i].id} name={robots[i].name} email={robots[i].email} set={robots[i].set} />\n    })\n\n    return (\n        <div>\n            {cardArray}\n        </div>\n    )\n}\n\nexport default CardList","import React from 'react'\n\n\nconst SearchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                aria-label='Search Robots'\n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='search robots'\n                onChange={searchChange} \n            />\n        </div>\n    )\n}\n\nexport default SearchBox","import React from 'react'\nimport '../styles/components/Scroll.css'\n\n\nconst Scroll = (props) => {\n    return (\n        <div className='sec'>\n            {props.children}\n        </div>\n    )\n}\n\nexport default Scroll;","import React, { Component } from 'react';\n\n\nclass ErrorBoundry extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hasError: false\n        }\n        \n    }\n\n    componentDidCatch(error, info) {\n        this.setState({ hasError: true })\n    }\n\n    render() {\n        if (this.state.hasError){\n            return (\n                <div>\n                    <h1>Oops, This shouldnt happen</h1>\n                    <p>Please get in touch with us! Thank you</p>\n                </div>\n            )\n        }\n        return this.props.children\n    }\n\n}\n\nexport default ErrorBoundry;","import React, { Component } from 'react';\n\nclass Header extends Component {\n    // Stops Rerending of component\n    shouldComponentUpdate(nextProps, nextState) {\n        return false\n    }\n    render() {\n        return <h1 className='f1'>RoboFriends</h1>\n    }\n}\n\nexport default Header","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport CardList from '../components/CardList'\nimport SearchBox from '../components/SearchBox'\nimport Scroll from '../components/Scroll'\nimport ErrorBoundry from '../components/ErrorBoundry'\nimport Header from '../components/Header'\nimport '../containers/App.css'\nimport logo from '../styles/logo.svg'\n\nimport { setSearchField, requestRobots } from '../actions'\n\nconst mapStateToProps = (state) => {\n    return {\n        searchField: state.searchRobots.searchField,\n        robots: state.requestRobots.robots,\n        isPending: state.requestRobots.isPending,\n        error: state.requestRobots.error\n\n    }\n}\n\nconst mapDispatchToProps = (dispatch) => {\n    return {\n        onSearchChange: (event) => dispatch(setSearchField(event.target.value)),\n        onRequestRobots: () => dispatch(requestRobots())\n    }\n}\n\nclass App extends Component {\n    componentDidMount() {\n        this.props.onRequestRobots()\n    }\n\n    render () {\n        const { searchField, onSearchChange, robots, isPending} = this.props\n        // CardList\n        const filteredRobots = robots.filter((robot) => {\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\n        })\n        if (isPending) {\n            return(\n                <div className='tc'>\n                    <img src={logo} className=\"App-logo\" alt=\"logo\" />\n                    <h1>Loading...</h1>\n                </div>\n            ) \n        } else {\n            return (\n                <div className='tc'>\n                    <Header />\n                    <SearchBox searchChange={onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundry>\n                            <CardList robots={filteredRobots} />\n                        </ErrorBoundry>\n                    </Scroll>\n                </div>\n            )\n        }\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED } from './constants'\n\nexport const setSearchField = (text) => ({\n    type: CHANGE_SEARCH_FIELD,\n    payload: text\n})\n\nexport const requestRobots = () => (dispatch) => {\n    dispatch({ type: REQUEST_ROBOTS_PENDING })\n    fetch(`https://jsonplaceholder.typicode.com/users`)\n            .then((response) => response.json())\n            .then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS, payload: data }))\n            .catch(error => dispatch({ type: REQUEST_ROBOTS_FAILED, payload: error }))\n}","export const  CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'\n\nexport const REQUEST_ROBOTS_PENDING = 'REQUEST_ROBOTS_PENDING'\nexport const REQUEST_ROBOTS_SUCCESS = 'REQUEST_ROBOTS_SUCCESS'\nexport const REQUEST_ROBOTS_FAILED = 'REQUEST_ROBOTS_FAILED'","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { \n    CHANGE_SEARCH_FIELD,\n    REQUEST_ROBOTS_PENDING,\n    REQUEST_ROBOTS_SUCCESS,\n    REQUEST_ROBOTS_FAILED } from './constants.js'\n\nconst intialStateSearch = {\n    searchField: ''\n}\n\nexport const searchRobots = (state=intialStateSearch, action={}) => {\n    switch(action.type) {\n        case CHANGE_SEARCH_FIELD:\n            return { ...state, searchField: action.payload}\n        default:\n            return state\n\n    }\n}\n\nconst intialStateRobots = {\n    isPending: false,\n    robots: [],\n    error: ''\n}\n\nexport const requestRobots = (state=intialStateRobots, action={}) => {\n    switch(action.type) {\n        case REQUEST_ROBOTS_PENDING:\n            return { ...state, isPending: true}\n        case REQUEST_ROBOTS_SUCCESS:\n            return { ...state, robots: action.payload, isPending: false }\n        case REQUEST_ROBOTS_FAILED:\n            return { ...state, error: action.payload, isPending: false}\n        default:\n            return state\n\n    }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore, applyMiddleware, combineReducers } from 'redux';\nimport { createLogger } from 'redux-logger'\nimport thunkMiddleWare from 'redux-thunk'\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots, requestRobots } from './reducers';\n// My Imports\nimport 'tachyons';\n\nconst logger = createLogger();\n\nconst rootReducer = combineReducers({\n    searchRobots,\n    requestRobots\n})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleWare, logger))\n\n\n\nReactDOM.render(\n                <Provider store={store}>\n                    <App />\n                </Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}